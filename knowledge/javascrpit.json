{
  "title": "JavaScript",
  "description": "JavaScript (JS) is a high-level, interpreted programming language primarily used to add interactivity, dynamic behavior, and control to web pages. It runs in web browsers but is also widely used on servers (eg, Node.js). JavaScript enables client-side scripting for web development and supports object-oriented, functional, and imperative programming styles.",
  "sections": [
    {
      "heading": "Definition",
      "content": "JavaScript (JS) is a high-level, interpreted programming language primarily used to add interactivity, dynamic behavior, and control to web pages. It runs in web browsers but is also widely used on servers (eg, Node.js). JavaScript enables client-side scripting for web development and supports object-oriented, functional, and imperative programming styles.\n"
    },
    {
      "heading": "Key Features",
      "content": "Interpreted Language: Code is executed line-by-line without prior compilation.\nDynamic Typing: Variables can hold any type of data and types can change at runtime.\nFirst-Class Functions: Functions are treated as objects and can be assigned to variables, passed as arguments, and returned from other functions.\nEvent-Driven Programming: Reacts to user inputs or browser events like clicks, keystrokes, or loading.\nPrototype-Based Inheritance: Objects inherit directly from other objects without classical classes (though ES6 introduced class syntax as syntactic sugar).\nAsynchronous Programming: Supports callbacks, promises, and async/await for handling asynchronous tasks.\nCross-Platform: Runs on all modern web browsers and many other platforms.\nDOM Manipulation: Can access and modify HTML and CSS dynamically to update the web page content and styles.\nBuilt-in APIs: Provides many APIs like Fetch, Web Storage, Canvas, and more for rich web app features.\n"
    },
    {
      "heading": "Types / Subfields",
      "content": "Core JavaScript: The base language, including variables, operators, control flow, functions, objects, arrays, etc.\nDOM Scripting: Using JavaScript to interact with the Document Object Model (DOM) to dynamically manipulate HTML and CSS.\nEvent Handling: Writing code to respond to user or browser events like clicks, mouse movements, keyboard input.\nAsynchronous JS: Handling asynchronous operations with callbacks, promises, and async/await.\nJavaScript Frameworks & Libraries: Tools like React, Angular, Vue.js, and jQuery that simplify and structure JS development (beyond basics).\nServer-side JavaScript: Using JavaScript outside the browser with Node.js for backend development.\nES6+ Features: Modern JavaScript introduces new syntax and features like arrow functions, classes, modules, destructuring, template literals.\n"
    },
    {
      "heading": "Advantages",
      "content": "Enhances User Experience: Enables interactive, dynamic web pages.\nUniversal Support: Runs natively in all modern browsers without plugins.\nVersatile: Can be used for front-end and back-end development.\nRich Ecosystem: Huge number of libraries, frameworks, and tools.\nFast Development: Interpreted and dynamically typed, allowing quick coding and testing.\nEvent-Driven: Well suited for interactive applications responding to user actions.\nIntegration: Easily integrates with HTML and CSS for full web solutions.\n"
    },
    {
      "heading": "Limitations / Challenges",
      "content": "Browser Differences: Different browsers may implement features differently or with bugs.\nSecurity Risks: Client-side JS can be manipulated; also vulnerable to XSS attacks if not handled properly.\nDynamic Typing Pitfalls: Type coercion can lead to unexpected bugs and harder debugging.\nPerformance: Interpreted nature and single-threaded model can cause performance bottlenecks in complex apps.\nAsynchronous Complexity: Handling async code can be tricky for beginners.\nLack of Compile-Time Checks: Errors often appear only during execution.\n"
    },
    {
      "heading": "Applications",
      "content": "Web Page Interactivity: Form validation, animations, dynamic content updates.\nSingle Page Applications (SPAs): Complex front-end apps like Gmail, Facebook using frameworks.\nMobile App Development: Frameworks like React Native enable JS for mobile apps.\nServer-Side Programming: Node.js enables backend services, APIs, and real-time apps.\nGame Development: Browser-based games using Canvas and WebGL.\nAutomation & Scripting: Tools like Puppeteer automate browser tasks using JS.\nBrowser Extensions: Develop plugins for browsers to extend functionality.\n"
    }
  ]
}
